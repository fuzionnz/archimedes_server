<?php

require_once dirname(__FILE__) . '/archimedes_server.features.inc';

/**
 * Implementation of hook_perm().
 */
function archimedes_server_perm() {
  return array('administer monitored site');
}

/**
* Implementation of hook_menu().
*/
function archimedes_server_menu() {
  $items = array();
  $items['admin/archimedes'] = array(
    'title' => t('Archimedes'),
    'access arguments' => array('access administration pages'),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('archimedes_server_admin'),
    'description' => t('Administer Archimedes Server'),
    'type' => MENU_NORMAL_ITEM,
  );
  $items['archimedes-server/verify-user'] = array(
    'access arguments' => array('administer monitored site'),
    'type' => MENU_CALLBACK,
    'page callback' => 'archimedes_server_verify_user',
  );
  $items['archimedes-server/update'] = array(
    'access arguments' => array('always acces'),
    'access callback' => 'is_string',
    'page callback' => 'archimedes_server_post_xml',
  );
  return $items;
} // archimedes_server_menu()

/**
 * Settings form.
 * 
 * @TODO #7: Show a warning if archimedes_server_check_webkit() fails here.
 */
function archimedes_server_admin() {
  $graphs = array();
  $apis = charts_graphs_apis();
  foreach ($apis as $api) {
    $graphs[$api->name] = $api->nice_name;
  }
  $form = array();
  $form['archimedes_mail'] = array(
    '#type' => 'fieldset',
    '#title' => t('POP Mail Settings'),
  );
  $form['archimedes_mail']['archimedes_mail_server'] = array(
    '#type' => 'textfield',
    '#title' => t('POP Mail Server'),
    '#default_value' => variable_get('archimedes_mail_server', ''),
    '#description' => t('Set mail server for Archimedes to get update emails.'),
    '#required' => TRUE,
  );
  $form['archimedes_mail']['archimedes_mail_port'] = array(
    '#type' => 'textfield',
    '#title' => t('POP Mail Port'),
    '#size' => 5,
    '#default_value' => variable_get('archimedes_mail_port', '110'),
    '#description' => t('Set mail server port.'),
    '#required' => TRUE,
  );
  $form['archimedes_mail']['archimedes_mail_user'] = array(
    '#type' => 'textfield',
    '#title' => t('POP Mail Username'),
    '#default_value' => variable_get('archimedes_mail_user', ''),
    '#description' => t('Set mail user for authentication.'),
    '#required' => TRUE,
  );
  $form['archimedes_mail']['archimedes_mail_password'] = array(
    '#type' => 'textfield',
    '#title' => t('POP Mail Password'),
    '#description' => t('Set mail pass for authentication. Warning: This is stored unencrypted in the database.'),
    '#default_value' => variable_get('archimedes_mail_password', ''),
    '#required' => TRUE,
  );
  $form['archimedes_mail']['archimedes_mail_ssl'] = array(
    '#type' => 'checkbox',
    '#title' => 'SSL enabled',
    '#default_value' => variable_get('archimedes_mail_ssl', FALSE),
    '#description' => 'Check this box if the email uses pop3 over SSL',
  );
  $form['archimedes_ui'] = array(
    '#type' => 'fieldset',
    '#title' => t('User Interface'),
  );
  $form['archimedes_ui']['archimedes_ui_graph'] = array(
    '#type' => 'select',
    '#title' => 'Charts and Graphs Library',
    '#default_value' => variable_get('archimedes_ui_graph', 'google-charts'),
    '#description' => 'Select the graphing library to use. Enable more on the modules page. Warning: Archimedes has been written to use Google Charts, other libraries may not function as well.',
    '#options' => $graphs
  );
  $form['archimedes_keys'] = array(
    '#type' => 'fieldset',
    '#title' => t('SSL Public Key'),
    '#collapsible' => TRUE,
    '#collapsed' => TRUE,
  );
  $form['archimedes_keys']['archimedes_key_public'] = array(
    '#value' => t('<pre>!public_key</pre>', array('!public_key' => variable_get('archimedes_key_public', ''))),
  );

  $form['#validate'][] = 'archimedes_server_form_validate_inbox';

  return system_settings_form($form);
} // archimedes_server_admin()

/**
 * Form handler for vaildating the archimedes inbox.
 */
function archimedes_server_form_validate_inbox($form, $form_state) {
  $values = $form_state['values'];
  if (!archimedes_server_open_inbox($values['archimedes_mail_server'], $values['archimedes_mail_port'], $values['archimedes_mail_user'], $values['archimedes_mail_password'], $values['archimedes_mail_ssl'])) {
    form_set_error('archimedes_mail', t('Failed to login to email inbox with existing credentials.'));
    return FALSE;
  }
}

/**
 * Open up the archimedes email inbox.
 */
function archimedes_server_open_inbox($server, $port, $user, $pass, $ssl = FALSE) {
  $mailbox = strtr('{%server:%port/%path}INBOX', array(
    '%server' => $server,
    '%port' => $port,
    '%path' => $ssl ? 'pop3/ssl/novalidate-cert' : 'pop3/notls',
  ));
  return imap_open(imap_utf7_encode($mailbox), $user, $pass);
}

/**
 * Reads the configured inbox and builds array of attached XML
 */
function archimedes_server_get_xml(){
  $mbox = archimedes_server_open_inbox(
    variable_get('archimedes_mail_server', ''),
    variable_get('archimedes_mail_port', '110'),
    variable_get('archimedes_mail_user', ''),
    variable_get('archimedes_mail_password', ''),
    variable_get('archimedes_mail_ssl', FALSE)
  );
  $data = array();
  // Read each message in inbox
  for($i = 1; $i <= imap_num_msg($mbox); $i++) {
    $struct = imap_fetchstructure($mbox, $i);

    $pkey = variable_get('archimedes_key_private', '');
    $id = 1;
    $xml = '';
    $ekey = '';
    $crypt = FALSE;
    foreach($struct->parts as $section) {
      $sect = imap_fetchbody($mbox,$i,$id);

      // Decode message if encoded
      if ($section->encoding == 3)     // 3 = BASE64
        $sect = base64_decode($sect);
      elseif ($section->encoding == 4) // 4 = QUOTED-PRINTABLE
        $sect = quoted_printable_decode($sect);

      // check for xml attachment
      if ($section->subtype == 'XML' && $section->disposition == 'ATTACHMENT') {
        $xml = $sect;
      }
      // Encrypted messages will contain section starting 'EKEY:'
      elseif (substr($sect,0,5) == 'EKEY:') {
        $crypt = TRUE;
        $ekey = substr($sect,6);
      }
      $id++;
    }
    imap_delete($mbox, $i);

    // Decrypt encrypted message
    if ($crypt) {
      $prikey = openssl_pkey_get_private($pkey);
      openssl_open($xml,$uncrypt,$ekey, $prikey);
      openssl_free_key($prikey);
      $xml = $uncrypt;
      if (!isset($xml)) {
        $header = imap_headerinfo($mbox,$i);
        watchdog("Archimedes","An encryted update was recieved from %from, but Archimedes Server was unable to decrypt it. It is likely the saved public key is incorrect.", array("%from" => $header->fromaddress), WATCHDOG_ERROR);
        continue;
      }
    }
    if (empty($xml)) {
      $header = imap_headerinfo($mbox,$i);
      watchdog("Archimedes","An update was recieved from %from, but Archimedes Server was unable to read it.", array("%from" => $header->fromaddress), WATCHDOG_ERROR);
      continue;
    }
    $data[] = $xml;
  }
  imap_expunge($mbox); //uncomment to delete from mailbox. Leave commented during testing
  imap_close($mbox);

  return $data;
}

function archimedes_server_post_xml() {
  if (!$data = json_decode(file_get_contents('php://input'))) {
    drupal_not_found();
    die;
  }
  $ekey = base64_decode($data->key);
  $data = base64_decode($data->data);

  $prikey = openssl_pkey_get_private(variable_get('archimedes_key_private', ''));
  openssl_open($data,$xml,$ekey, $prikey);
  openssl_free_key($prikey);

  echo archimedes_server_process_document($xml) ? "1" : "0";
  die;
}

/**
* Implementation of hook_cron().
*/
function archimedes_server_cron() {
  archimedes_server_clear_inbox();
}


/**
* Update all nodes from inbox
*/
function archimedes_server_clear_inbox() {
  module_load_include('inc', 'archimedes_server');

  // Get all updates form inbox 
  $data = archimedes_server_get_xml();

  if (empty($data)) {
    return;
  }
  date_default_timezone_set('UTC');

  // loop through each xml update
  foreach($data as $xml) {
    archimedes_server_process_document($xml);
  }
}

/**
 * Process an XML document into a site report.
 */
function archimedes_server_process_document($xml) {
  module_load_include('inc', 'archimedes_server');
  // create blank node object
  $node = new stdClass();

  $dom = new DOMDocument();
  $dom->loadXML($xml);

  // fail if $dom->documentElement not set
  if (!isset($dom->documentElement)) {
    return;
  }

  // Get unique identifier and check if in system
  $id = $dom->documentElement->getAttribute('id');
  $type = $dom->documentElement->getAttribute('type');
  $author = $dom->documentElement->getAttribute('author');
  $datetime = $dom->documentElement->getAttribute('datetime');

  // ignore if content type does not exist
  if (!$node_type = content_types($type)) {
    watchdog('Archimedes', "Archimedes doesn't not currently support $type.", array(), WATCHDOG_ERROR);
    return;
  }

  // The user may not yet exist so create the user
  // but do not activate the user.
  $uid = archimedes_server_user_save($author);

  // check if there is a node with unique id already
  $field = content_fields('field_unique_hash', $type);
  $db_info = content_database_info($field);
  if ($nid = db_result(db_query(sprintf("SELECT type.nid FROM {content_type_%s} type LEFT JOIN {".$db_info['table']."} hash ON type.vid=hash.vid WHERE hash.field_unique_hash_value = '%s' LIMIT 1", $type, $id)))) {
    $node = node_load(array('nid' => $nid));
    $node->revision = TRUE;
  }
  else {
    $node->type = $node_type['type'];
    $node->created = time();
    $node->status = 1; //published
    $node->promote = 0;
    $node->sticky = 0;
    $node->uid = $uid;
    $node->comment = variable_get('comment_' . $type, 2);
    $node->field_unique_hash = array(0 => array('value' => $id));
  }

  // Attempt to parse the XML into a node. Any failure to parse
  // will throw an exception in which case we will not try to
  // save the node.
  try {
    foreach($dom->getElementsByTagName('field') as $item) {
      $fid = $item->getAttribute('id');
      // non cck fields
      if ($fid == 'title' || $fid == 'body') {
        $node->{$fid} = trim($item->nodeValue);
        return;
      }

      // If content type has no record of field id
      // then do not attempt to save it.
      if (!$field = $node_type['fields'][$fid]) {
        return;
      }

      $values = array();
      foreach ($item->getElementsByTagName('value') as $value) {
        // Check for plugins being used.
        $plugins = array();
        foreach ($value->attributes as $v) {
          $plugins[$v->namespaceURI] = strtr($v->namespaceURI, array('monitor-plugin:' => ''));
        }
        $values[] = archimedes_server_run_plugins($plugins, $field, $value);
      }

      //attach values to node field
      $node->{$fid} = $values;
    }

    // collect screenshot of website if not already saved.
    if (archimedes_server_check_webkit() && !isset($node->field_thumbnail[0]) && isset($node->field_servername[0]['url'])) {
      try {
        $filename = preg_replace("/[^a-zA-Z0-9]/", "", $node->title) . '.png';
        $filepath = file_directory_temp() . '/' . $filename;
        $files_directory = archimedes_find_root() . '/' . file_directory_path();
        $cmd = "python " . dirname(__FILE__) . "/python-webkit2png/webkit2png.py --log=" . $files_directory . "/webkit2png.log -x 1024 768 -g 1024 768 -o $filepath -w 1 %s";
        archimedes_server_shell_exec($cmd, $node->field_servername[0]['url']);
        if (!file_exists($filepath)) {
          watchdog("Archimedes", "Server failed to take screenshot of site %url", array("%url" => $node->field_servername[0]['url']), WATCHDOG_ERROR);
          // Exit early.
          throw new Exception();
        }

        $max_width = 800;
        $max_height = 600;

        if (module_exists('imageapi') && imageapi_default_toolkit()) {
          $res = imageapi_image_open($filepath);
          imageapi_image_scale($res, $max_width, $max_height);
          imageapi_image_close($res);
        }
        // Try to resize the image to fit the dimensions.
        elseif (image_get_toolkit()) {
          image_scale($filepath, $filepath, $max_width, $max_height);
        }

        $field = field_file_save_file($filepath, array(),file_directory_path().'/thumbs');

        // Generate imagecache thumbnail
        $presetname = 'SiteThumb';
        if ($preset = imagecache_preset_by_name($presetname)) {
          $dst = imagecache_create_path($presetname, $field['filepath']);
          if (!file_exists($dst)) {
            imagecache_build_derivative($preset['actions'], $field['filepath'], $dst);
          }
        }

        $node->field_thumbnail = array(0 => $field);
      }
      catch (Exception $e) {}
    }

    // Record the time of report import.
    $update = explode('+', date('c',strtotime($datetime))); // convert back to UTC timezone
    $node->field_last_update = array(0 => array('value' => $update[0]));

    // save now so hooks have access to the nid if needed
    node_save($node);
    $node->revision = FALSE;

    // allow other modules to modify node before final save
    drupal_alter('archimedes_site', $node, 'pre');

    // save node after hooks
    node_save($node);

    // allow other modules to modify node after final save
    drupal_alter('archimedes_site', $node, 'post');

  }
  catch (Exception $e) {
    watchdog('Archimedes', "Cannot import report into node: %reason", array("%reason" => $e->getMessage()), WATCHDOG_ERROR);
    return FALSE;
  }
  return TRUE;
}

/**
  * Hook into the archimedes_site hook (for drupal_alter in update function)
  *
  * Check whether the directory hashes have changed and notify roles if they have
  * @author Adam Bramley
  */
function archimedes_server_archimedes_site_alter($node){
  $roles = variable_get('archimedes_notifications', array());
  $hash_roles = $roles['archimedes_directory_hash_roles'];
  $revisions = node_revision_list($node);
  //take the 2nd element in the array
  next($revisions);
  if ($key = key($revisions))  {
    $previous_node = node_load($node->nid, $key);
  }
  else  {
    //no previous revision to compare to so just return
    return;
  }

  $current_hash = $node->field_directory_hash[0]['value'];
  $previous_hash = $previous_node->field_directory_hash[0]['value'];
  if ($current_hash != $previous_hash) {
    $users = $node->field_users;
    $emails = archimedes_server_get_role_emails($users, $hash_roles);
    if (!empty($emails))  {
      $from = variable_get('archimedes_server_email','archimedes@catalyst.net.nz');
      $message = array(
        'to' => implode(', ', $emails),
        'subject' => t("Directory hash warning ($node->title)"),
        'body' => "<h4>Security Warning</h4>A change in the md5 hashing of the site data for $node->title has been detected. This could potentially be a malicious attack, please check with site maintainers to see if there's been a recent update.",
        'headers' => array(
          'MIME-Version' => '1.0',
          'Content-Type' => 'text/html; charset=UTF-8; format=flowed',
          'Content-Transfer-Encoding' => '8Bit',
          'X-Mailer' => 'Drupal',
          'From' => $from
        ),
      );
      if (module_exists('messaging')) {
        $send = messaging_message_send($emails, $message, variable_get('messaging_default_method', 'mail'));
      }
      else{
        $send = drupal_mail_send($message);
      }
    }
  }
}

function archimedes_server_get_role_emails($users, $roles)  {
  $emails = array();
  foreach ($users as $current)  {
    $user = user_load($current['uid']);
    $user_roles = $user->roles;
    while ($role = current($user_roles)) {
      if (in_array(key($user_roles), $roles) && !in_array($user->mail, $emails))  {
        //a role for the user is in the roles set to be notified
       $emails[] = $user->mail;
      }
      next($user_roles);
    }
  }
  return $emails;
}

function archimedes_server_check_webkit(){
  return is_dir(dirname(__FILE__) . '/python-webkit2png');
}

/**
 * Define archimedes default plugin list
 */
function archimedes_server_archimedes_server_plugins() {
  return array(
    'node', 'user', 'drupal-package',
  );
}


function archimedes_server_shell_exec($cmd) {
  $args = func_get_args();

  //do not change the command itself, just the parameters.
  for ($x = 1; $x < sizeof($args); $x++) {
    $args[$x] = escapeshellarg($args[$x]);
  }
  $command = call_user_func_array('sprintf', $args);

  return exec($command, $output, $result) ? $output : FALSE;
} // archimedes_shell_exec()



/**
  * Implementation of hook_block().
  * @param string $op one of "list", "view", "save" and "configure"
  * @param integer $delta code to identify the block
  * @param array $edit only for "save" operation
  */
function archimedes_server_block($op = 'list', $delta = 0, $edit = array()) {
  if ($op == 'list') {
    // Generate listing of blocks from this module, for the admin/block page
    $block = array();
    $block[0]['info'] = t('Storage Overview');
    $block[1]['info'] = t('Administer Monitored Site');
    $block[2]['info'] = t('Host Total Usage');
    $block[3]['info'] = t('Host Usage by Site');
    return $block;
  } elseif ($op == 'view') {

    $content = '';
    $subject = '';

    switch($delta) {
      case 0:
        if(arg(0) == 'node' && is_numeric(arg(1)) && ! arg(2)) {
          $node = node_load(arg(1));

          // Storage overview graph
          $size[0] = $node->field_db_size[0]['value'];
          $size[1] = $node->field_sitesize[0]['value'];
          $size[2] = $node->field_sitedata[0]['value'];

          $canvas = charts_graphs_get_graph(variable_get('archimedes_ui_graph', 'google-charts'));

          $canvas->title = "Storage Overview";
          $canvas->type = "pie";
          $canvas->width = 600;
          $canvas->height = 300;
          $canvas->series = array(
            'DB Size' => $size,
            'Webroot Size' => array(1),
            'Site Data Size' => array(1),
          );
          $canvas->x_labels = array(archimedes_server_format_bytes($size[0]), archimedes_server_format_bytes($size[1]), archimedes_server_format_bytes($size[2]));

          // check if associated SLA exists and calculate free disk space
          if ($sla = $node->field_sla[0]['nid']) {

            $sla_node = node_load($sla);
            $space = $sla_node->field_disk_space[0]['value'];
            $fs = ($space*1048576) - array_sum($size);

            // better check we aren't exceeding allowable disk space
            if ($fs < 0) {
              $fs = 0;
              $canvas->title .= '|' . t('Exceeding allowable disk space by') . ' ' . archimedes_server_format_bytes(array_sum($size) - ($space*1048576));
              $canvas->title_color = 'FF0000';
            } else {
               $canvas->series['Free Space'] = array(1);
               $canvas->series['DB Size'][] = $fs;
               $canvas->x_labels[] = archimedes_server_format_bytes($fs);
            }
          }

          $subject = t('Storage Overview');
          $content = $canvas->get_chart();
        }
        break;
      case 1:
        if (user_access('administer monitored site')) {
          if(arg(0) == 'node' && is_numeric(arg(1)) && ! arg(2)) {
            $node = node_load(arg(1));
            $subject = "";
            $url = $node->field_servername[0]['url'];
            $hash = $node->field_unique_hash[0]['value'];
            if (!empty($url) && !empty($hash)) {
              global $user;
              $time = time();
              $query = array(
                'h' => $_SERVER['SERVER_NAME'],
                'w' => md5($user->name . $user->mail),
                't' => $time,
                'i' => md5($time . $hash),
              );
              $content = l(t("Administer Site &raquo;"), $url . '/archimedes/login', array('query' => $query, 'html' => TRUE));
              $content = '<div class="archimedes-administer-site">' . $content . '</div>';
            }
          }
        }
        break;
      case 2:
        if(arg(0) == 'node' && is_numeric(arg(1)) && ! arg(2)) {
          $host = node_load(arg(1));

          // Get total disk space from host node
          $total = ($host->field_disk_space[0]['value'] ? (int)$host->field_disk_space[0]['value'] * 1024 * 1024 : 0);

          $used = 0;
          // Get list of nodes showing current host as webserver or dbhost
          $data = nodereferrer_referrers(arg(1),array('field_webserver', 'field_dbhost'));

          // Add data usage depending if used as a webserver or dbhost
          foreach($data as $ref_node) {
            $node = node_load($ref_node['nid'],null,TRUE);
            if ($ref_node['referrers']['field_webserver']) {
              $used += (int) $node->field_sitesize[0]['value'];
              $used += (int) $node->field_sitedata[0]['value'];
            }
            if ($ref_node['referrers']['field_dbhost']) {
              $used += (int) $node->field_db_size[0]['value'];
            } 
          }
          
          $canvas = charts_graphs_get_graph(variable_get('archimedes_ui_graph', 'google-charts'));
          
          $canvas->title = "Total Usage";
          $canvas->type = "pie";
          $canvas->width = 550;
          $canvas->height = 300;
          $canvas->series = array(
            'Used Space' => array($used, ($total > $used ? $total - $used : 0)),
            'Free Space' => array(1)
          );
 
          $canvas->x_labels = array(archimedes_server_format_bytes($used), archimedes_server_format_bytes($total - $used));

          $subject = t('Total Usage');
          $content = $canvas->get_chart();
        }
        break;
      case 3:
        if(arg(0) == 'node' && is_numeric(arg(1)) && ! arg(2)) {
          $host = node_load(arg(1));
          
          $used = array();
          // Get list of nodes showing current host as webserver or dbhost
          $data = nodereferrer_referrers(arg(1),array('field_webserver', 'field_dbhost'));
          
          // Loop through each reffering site and add server usage
          foreach($data as $ref_node) {
            $node = node_load($ref_node['nid'],null,TRUE);
            $used[$ref_node['nid']] = array();
            $used[$ref_node['nid']]['usage'] = 0;
            $used[$ref_node['nid']]['title'] = $ref_node['title'];
            if ($ref_node['referrers']['field_webserver']) {
              $used[$ref_node['nid']]['usage'] += (int) $node->field_sitesize[0]['value'];
              $used[$ref_node['nid']]['usage'] += (int) $node->field_sitedata[0]['value'];
            }
            if ($ref_node['referrers']['field_dbhost']) {
              $used[$ref_node['nid']]['usage'] += (int) $node->field_db_size[0]['value'];
            } 
          }
          
          $canvas = charts_graphs_get_graph(variable_get('archimedes_ui_graph', 'google-charts'));
          
          $canvas->title = "Usage by Site";
          $canvas->type = "pie";
          $canvas->width = 550;
          $canvas->height = 300;
          
          //Rearrange data because charts_graphs module is strange
          $sizes = $labels = $series = array();
          foreach($used as $site) {
            $sizes[] = $site['usage'];
            $labels[] = archimedes_server_format_bytes($site['usage']);
          }
          foreach($used as $site) {
            $site['title'] = substr($site['title'],0,30);
            // Allow for unlikely senario where sites have the same name
            while(isset($series[$site['title']])) {
              $site['title'] = $site['title'] . '\'';
            }
            $series[$site['title']] = $sizes;
          }
          $canvas->series = $series;
          
 
          $canvas->x_labels = $labels;

          $subject = t('Usage by Site');
          $content = $canvas->get_chart();
        }
        break;
    }
    // Generate our block content
    $block['subject'] = $subject;
    $block['content'] = $content;

    return $block;
  }

} // function archimedes_server_block


/**
* Implementation of hook_nodeapi().
*/
function archimedes_server_nodeapi(&$node, $op, $teaser, $page) {
  switch ($op) {
    case 'insert':
      // Reference new SLA from reffering site node
      if ($node->type == 'sla' && is_numeric($snid = $_GET['snid'])) {
        $snode = node_load($snid);
        $snode->field_sla[0]['nid'] = $node->nid;
        node_save($snode);
      }
  }
}


function archimedes_server_format_bytes($size) {
    $units = array(' B', ' KB', ' MB', ' GB', ' TB');
    for ($i = 0; $size >= 1024 && $i < 4; $i++) $size /= 1024;
    return round($size, 2).$units[$i];
}

/**
 * Verify a user has rights to administer a site.
 */
function archimedes_server_verify_user() {
  $fail_token = md5(mt_rand('100', '1000') . time());

  try {
    if (!isset($_GET['ekey']) || !isset($_GET['data'])) {
      throw new Exception($token);
    }

    $pkey = variable_get('archimedes_key_private', '');

    $prikey = openssl_pkey_get_private($pkey);
    openssl_open($_GET['data'],$uncrypt,$_GET['ekey'], $prikey);
    openssl_free_key($prikey);

    if (!$query = unserialize($uncrypt)) {
      throw new Exception($token);
    }
    if (!isset($query['token']) || !isset($query['redirect'])) {
      throw new Exception($token);
    }
    $token = $query['token'];
  }
  catch (Exception $e) {
    $token = $e->getMessage();
  }
  drupal_goto($query['redirect'], array('token' => $token));
}
