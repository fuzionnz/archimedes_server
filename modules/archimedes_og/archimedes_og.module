<?php

/**
 * Implemenation of hook_theme().
 */
function archimedes_og_menu() {
  $items = array();
  $items['archimedes-og/activity-update.json'] = array(
    'type' => MENU_CALLBACK,
    'page callback' => 'archimedes_activity_update',
    'access arguments' => array('access content'),
  );
  return $items;
}

/**
 * Implementation of hook_archimedes_site
 */
function archimedes_og_archimedes_site_alter(&$node, $op) {
  if ($op == 'pre') {
    $lookup_hash = $node->field_common_hash[0]['value'];
    $nid = db_result(db_query("SELECT n.nid FROM {content_field_common_hash} h INNER JOIN {node} n on n.nid = h.nid WHERE n.type = 'group' AND field_common_hash_value = '%s'", $lookup_hash));
    if (!$nid) {
      // Maybe type find a group with the same name?
      if ($group = node_load(array('title' => $node->title, 'type' => 'group'))) {
        $nid = $group->nid;
        if (!$group->field_common_hash[0]['value']) {
          $group->field_common_hash[0]['value'] = $lookup_hash;
          node_save($group);
        }
      }
      else {
        $group = (object) array(
          'title' => $node->title,
          'og_description' => $node->body,
          'type' =>  'group',
          'field_common_hash' => array(array('value' => $lookup_hash)),
          'status' => 1,
          'uid' => variable_get('archimedes_server_system_uid', 1),
          'og_private' => 0,
          'spaces_preset_og' => 'atrium_groups_public',
        );
        node_save($group);
        $nid = $group->nid;
      }
    }
    $node->og_groups[$nid] = $nid;
    $node->og_public = 1;
  }
}

/**
 * Implementation of hook_theme().
 */
function archimedes_og_theme() {
  return array(
    'archimedes_activity' => array(
      'arguments' => array('activity' => NULL),
    ),
  );
}

/**
 * Implementation of hook_block().
 */
function archimedes_og_block($op = 'list', $delta = 0, $edit = array()) {
  switch ($op) {
    case 'list':
      $blocks['activity']['info'] = t("Archimedes Activity");
      return $blocks;
    case 'view':
      if ($delta == 'activity' && $group = og_get_group_context()) {
        $limit = 100;
        $feed_limit = $limit / count(module_implements('archimedes_activity'));

        $activity = module_invoke_all('archimedes_activity', $group, $feed_limit, FALSE);
        usort($activity, 'archimedes_sort_activities');

        $page_limit = 60;
        $offset = 0;
        $pages = array_chunk(array_reverse($activity), $page_limit);

        $block['subject'] = t('!title Activity', array('!title' => $group->title));
        $block['content'] = theme('archimedes_activity', $pages[$offset]);
        return $block;
      }
  }
}

/**
 * Implementation of hook_archimedes_activity().
 */
function archimedes_og_archimedes_activity($group, $limit = FALSE, $since = FALSE) {
  $query = "SELECT n.nid, n.type, n.title, n.created, n.uid, nr.timestamp FROM {node} n INNER JOIN {node_revisions} nr on n.vid = nr.vid INNER JOIN {og_ancestry} o on o.nid = n.nid WHERE o.group_nid = %d AND n.status = 1";
  if ($since) {
    $query .= ' AND nr.timestamp > ' . (int) $since;
  }
  $query .= ' ORDER BY nr.timestamp DESC';
  if ($limit) {
    $query .= ' LIMIT ' . (int) $limit;
  }
  $rs = db_query($query, $group->nid);

  $activity = array();
  while ($row = db_fetch_object($rs)) {
    $H = date('H', $row->timestamp) < 12 ? 1 : 2;
    $actions[date('Ymd', $row->timestamp) . $H][] = $row;
  }

  foreach ($actions as $events) {
    $comments = $users = array();
    foreach ($events as $event) {
      $account = user_load(array('uid' => $event->uid));
      $type = node_get_types('name', $event->type);
      $types[$type] = $type;
      $comments[] = array(
        'comment' => t('!user !action <strong>!type</strong> !title', array(
          '!title' => l($event->title, 'node/' . $event->nid),
          '!action' => $event->timestamp == $event->created ? 'created' : 'updated',
          '!user' => theme('username', $account),
          '!type' => node_get_types('name', $event->type),
        )),
        'account' => $account,
        'timestamp' => $event->timestamp,
      );
      if (!isset($users[$event->uid])) {
        $users[$event->uid] = theme('username', user_load(array('uid' => $event->uid)));
      }
    }

    $last_user = array_pop($users);
    $last_type = array_pop($types);

    $action = array(
      'timestamp' => $event->timestamp,
      'type' => 'archimedes_og',
      'title' => '',
      'comments' => $comments,
    );
    if (!empty($users)) {
      $action['title'] = implode(', ', $users) . ' and ';
    }
    $action['title'] .= $last_user . ' ' . format_plural(count($users) + 1, 'has', 'have') . ' updated/created ' . implode(', ', $types) . (empty($types) ? '' : ' and ') . $last_type . ' content';
    $activity[] = $action;
  }
  return $activity;
}

/**
 * Theme function for archimedes activity.
 */
function theme_archimedes_activity($activity) {
  static $style_added = FALSE;
  if (!$style_added) {
    drupal_add_css(drupal_get_path('module', 'archimedes_og') . '/archimedes_og.css');
    drupal_add_js(drupal_get_path('module', 'archimedes_og') . '/archimedes_og.js');
    drupal_add_js(drupal_get_path('module', 'archimedes_og') . '/jquery.hoverIntent.minified.js');
    $style_added = TRUE;
  }
  $dates = array();
  foreach ($activity as $action) {
    $dates[date('Y-m-d', $action['timestamp'])][] = $action;
  }
  return _theme_archimedes_activity($activity);
  $table = '';
  foreach ($dates as $date => $activity) {
    $table .= '<table class="captioned archimedes-activity-table"><caption>' . date('l, dS M', strtotime($date)) . '</caption><tbody>';
    $table .= _theme_archimedes_activity($activity); 
    $table .= '</tbody></table>';
  }
  return $table;
}

function _theme_archimedes_activity($activity) {
  foreach ($activity as $action) {
    $table .= '<div class="archimedes-event type-' . $action['type'] . '">';
    $table .= '<div class="activity">';
    if (isset($action['account']) && $action['account']) {
      $table .= '<div class="avatar">';
      $action['account']->imagecache_preset = 'user-s';
      $table .= theme('user_picture', $action['account']);
      $table .= '</div>';
    }
    else {
      $table .= '<div class="action-type"></div>';
    }
    if ($action['title']) {
      $table .= '<h4 class="title">' . check_markup($action['title']) . '</h4>';
    }
    if ($action['activity']) {
      $table .= check_markup($action['activity']);
    }
    $table .= '</div><!-- .activity -->';
    if (isset($action['comments'])) {
      $table .= '<div class="activity-comments">';
      usort($action['comments'], 'archimedes_sort_activities');
      foreach ($action['comments'] as $comment) {
        $table .= '<div class="comment">';
        if (isset($comment['account']) && $comment['account']) {
          $comment['account']->imagecache_preset = 'user-s';
          $table .= theme('user_picture', $comment['account']);
        }
        else {
          $table .= theme('user_picture', NULL);
        }
        $table .= check_markup($comment['comment']);
        if (isset($comment['timestamp'])) {
           $table .= '<span class="date">' . date('g:ia l, jS \o\f M', $comment['timestamp']) . '</span>';
        }
        $table .= '<hr class="clear" /></div><!-- .comment -->';
      }
      if (isset($action['comments_footer'])) {
        $table .= '<div class="comment">';
        $table .= $action['comments_footer'];
        $table .= '</div>';
      }
      $table .= '</div>';
    } 
    if ($action['timestamp'] && !isset($action['comments'])) {
      $date_format = date('g:ia', $action['timestamp']);
      $table .= '<span class="date">' . $date_format . '</span>';
    }
    if (isset($action['footer'])) {
      $table .= $action['footer'];
    }
    $table .= '</div>';
  }
  return $table;
}

function archimedes_sort_activities($a, $b) {
  if ($a['timestamp'] == $b['timestamp']) {
    return 0;
  }
  return $a['timestamp'] > $b['timestamp'] ? 1 : -1;
}

function archimedes_activity_update() {
  $since = $_GET['since'];
  $data['timestamp'] = time();
  $group = node_load($_GET['gid']);
  $activity = module_invoke_all('archimedes_activity', $group, 10, $since);
  usort($activity, 'archimedes_sort_activities');

  $data['html'] = _theme_archimedes_activity($activity);
  drupal_json($data);die;
}
