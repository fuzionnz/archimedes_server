<?php

/**
 * Implementation of hook_menu().
 */
function archimedes_git_menu() {
  return array(
    'admin/archimedes/git' => array(
      'title' => 'Archimedes Git',
      'page callback' => 'drupal_get_form',
      'page arguments' => array('archimedes_git_settings'),
      'access arguments' => array('administer site configuration'),
      'type' => MENU_LOCAL_TASK,
    ),
    'archimedes/git/%node/%' => array(
      'title' => 'Git Commit',
      'title callback' => 'archimedes_git_commit_title',
      'title arguments' => array(2, 3),
      'page callback' => 'archimedes_git_show_commit',
      'page arguments' => array(2, 3),
      'access arguments' => array('view git commits'),
      'type' => MENU_CALLBACK,
      'file' => 'archimedes_git.pages.inc',
    ),
  );
}

/**
 * Implementation of hook_perm().
 */
function archimedes_git_perm() {
  return array('view git commits');
}

/**
 *  Implementation of hook_form_alter().
 */
function archimedes_git_form_alter(&$form, &$form_state, $form_id) {
  if ($form_id == 'group_node_form') {
    $form['archimedes_git'] = array(
      '#title' => 'Git Repository',
      '#type' => 'textfield',
      '#default_value' => $form['#node']->archimedes_git,
      '#description' => 'This is where archimedes will look for a git repository for this project on the server.',
      '#field_prefix' => variable_get('archimedes_git_repository_root', '/git') . '/',
    );
  }
}

/**
 * Administration page.
 */
function archimedes_git_settings() {
  return system_settings_form(array(
    'archimedes_git_repository_root' => array(
      '#type' => 'textfield',
      '#title' => 'Git Repositories Location',
      '#description' => 'Where on the server the repositories will sit.',
      '#default_value' => variable_get('archimedes_git_repository_root', '/git'),
    ),
  ));
}

/**
 * Implementation of hook_nodeapi().
 */
function archimedes_git_nodeapi(&$node, $op, $a3 = NULL, $a4 = NULL) {
  switch ($op) {
    case 'load':
      $node->archimedes_git = db_result(db_query("SELECT repo_location FROM {archimedes_git} WHERE nid = %d", $node->nid));
      break;
    case 'validate':
      if (empty($node->archimedes_git)) {
        break;
      }
      $repo = variable_get('archimedes_git_repository_root', '/git') . '/' . $node->archimedes_git;
      if (!is_dir($repo)) {
        form_set_error('archimedes_git', 'No such repository:' . $repo);
      }
      else {
        system(sprintf('cd %s && git config -l', $repo), $return_val);
        if ($return_val) {
          form_set_error('archimedes_git', 'Not a Git repository.');
        }
      }
      break;
    case 'insert':
    case 'update':
      $node->repo_location = $node->archimedes_git;
      if (db_result(db_query('SELECT 1 FROM {archimedes_git} WHERE nid = %d', $node->nid))) {
        drupal_write_record('archimedes_git', $node, array('nid')); 
      }
      else {
        drupal_write_record('archimedes_git', $node);
      }
      break;
  }
}

/**
 * Implementation of hook_archimedes_activity().
 */
function archimedes_git_archimedes_activity($group, $limit = FALSE, $since = FALSE) {
  if (empty($group->archimedes_git)) {
    return;
  }
  $count = 0;
  $activity = $actions = array();
  exec(sprintf('cd %s && git log --branches --remove-empty', variable_get('archimedes_git_repository_root', '/git') . '/' . $group->archimedes_git), $output, $return_val); 
  $action['comment'] = '';
  foreach ($output as $line) {
    if ($limit && $count >= $limit) {
      break;
    }
    if (empty($line)) {
      continue;
    }
    if (strpos($line, 'commit ') === 0) {
      if (isset($offset) && $offset) {
        $offset--;
        continue;
      }
      if (isset($action) && !$skip) {
        if (date('H', $action['timestamp']) < 12) {
          $H = 1;
        }
        elseif (date('H', $action['timestamp']) < 20) {
          $H = 2;
        }
        else {
          $H = 3;
        }
        $actions[date('Ymd', $action['timestamp']) . $H][] = $action;
        $count++;
      }
      $skip = FALSE;
      $action = array('commit' => l(substr($line, 7,7), 'archimedes/git/' . $group->nid . '/' . substr($line, 7)));
      continue;
    }
    if (strpos($line, 'Author: ') === 0) {
      preg_match_all('/^Author: ([\w\s]+)<(.*@.*)>/', $line, $matches);
      if ($account = user_load(array('mail' => $matches[2][0]))) {
        $action['username'] = theme('username', $account);
        $action['account'] = $account;
      }
      else {
        $action['username'] = l($matches[1][0], 'mailto:' . $matches[2][0]); 
      }
      continue;
    }
    if (strpos($line, 'Date: ') === 0) {
      $action['timestamp'] = strtotime(substr($line, 5));
      if ($since && $action['timestamp'] < $since) {
        break;
      }
      continue;
    }
    if (strpos($line, 'Merge: ') === 0) {
      $skip = TRUE;
      continue;
    }
    $action['comment'] .= $line . '<br />';
  }
  drupal_add_css(drupal_get_path('module', 'archimedes_git') . '/archimedes_git.css');

  $activity = array();
  foreach ($actions as $activities) {
    $users = $event = array();
    $timestamp = 0;
    foreach ($activities as $action) {
      $users[$action['username']] = $action['username'];
      $timestamp = $timestamp > $action['timestamp'] ? $timestamp : $action['timestamp'];
      $action['comment'] = $action['commit'] . ': ' . $action['comment'];
      $event['comments'][] = $action;
    }
    $event['type'] = 'archimedes_git';
    $event['timestamp'] = $timestamp;
    $event['title'] = '';
    $last_user = array_shift($users);
    if (!empty($users)) {
      $event['title'] .= implode(', ', $users) . ' and '; 
    }
    $event['title'] .= $last_user . ' committed to Git';
    $activity[] = $event;
  }

  return $activity;
}


function archimedes_git_commit_title($node, $hash) {
  $repo = variable_get('archimedes_git_repository_root', '/git') . '/' . $node->archimedes_git;
  exec(sprintf('cd %s && git show --oneline %s', $repo, $hash), $output);
  return substr($output[0], 8);
}
