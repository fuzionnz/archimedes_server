<?php

/**
 * Implementation of hook_perm().
 */
function archimedes_diagrams_perm() {
  return array('access system architecture diagrams');
}

/**
 * Implementation of hook_menu().
 */
function archimedes_diagrams_menu() {
  $items['node/%node/system-architecture'] = array(
    'title' => 'System Architecture',
    'page callback' => 'archimedes_diagrams_system_architecture',
    'page arguments' => array(1),
    'access arguments' => array(1, 'access system architecture diagrams'),
    'access callback' => 'archimedes_diagrams_node_is_application',
    'file' => 'archimedes_diagrams.pages.inc',
    'type' => MENU_LOCAL_TASK,
  );

  return $items;
}

/**
 * Implementation of hook_archimedes_server_plugins().
 */
function archimedes_diagrams_archimedes_server_plugins() {
  return array('dataset');
}

/**
 * Implementation of hook_nodeapi().
 */
function archimedes_diagrams_nodeapi(&$node, $op, $a3 = NULL, $a4 = NULL) {
  switch ($op) {
    case 'load':
      if ($node->type == 'application') {
        $node->archimedes_datasets = array();
        $rs = db_query("SELECT * FROM {archimedes_dataset} WHERE vid = %d", $node->vid);
        while ($row = db_fetch_object($rs)) {
          $node->archimedes_datasets[$row->fid] = $row->fid;
          $node->{$row->fid}[] = array(array('header' => TRUE, 'data' => $row->title), array('data' => $row->value));
        }
      }
    break;
    case 'view':
      if (!$a3 && $node->type == 'application') {
        foreach ($node->archimedes_datasets as $fid) {
          $node->content[$fid] = array('#value' => theme('table', array(), $node->{$fid}));
        }
      }
    break;
    case 'insert':
    case 'update':
      if ($node->type == 'application') {
        // Store all dataset data.
        if (isset($node->field_c_dataset)) {
          // Clear out any old data.
          db_query("DELETE FROM {archimedes_dataset} WHERE fid = '%s' AND vid = %d", 'field_c_dataset', $node->vid);
          foreach ($node->field_c_dataset as $row) {
            $record = array(
              'vid' => $node->vid,
              'fid' => 'field_c_dataset',
              'title' => $row['title'],
              'value' => $row['value'],
            );
            drupal_write_record('archimedes_dataset', $record);
          }
        }
      }
    break;
  }
}

/**
 * Implementation of hook_block().
 */
function archimedes_diagrams_block($op = 'list', $delta = 0, $edit = array()) {
  switch ($op) {
    case 'list':
      $rs = db_query("SELECT count(*), fid FROM {archimedes_dataset} GROUP BY fid");
      while ($row = db_fetch_object($rs)) {
        $blocks['dataset_' . $row->fid] = array(
          'info' => $row->fid,
        );
      }
      $blocks['stats_growth'] = array(
        'info' => 'Application Growth',
      ); 
      $blocks['stats_storage'] = array(
        'info' => 'Storage Overview',
      );
      return $blocks;
    case 'configure':
      $form = array();
      return archimedes_diagrams_form($form, variable_get('archimedes_diagram_settings_' . $delta, array(
        'diagram_width' => 300,
        'diagram_height' => 200,
      )));
    case 'save':
      variable_set('archimedes_diagram_settings_' . $delta, $edit);
    break;
    case 'view':
      if (strpos($_GET['q'], 'node/') !== 0) {
        return;
      }
      if ($vid = arg(3)) {
        $node = node_load(arg(1), $vid);
      }
      else {
        $node = node_load(arg(1));
      }
      $settings = variable_get('archimedes_diagram_settings_' . $delta, array(
        'diagram_width' => 300,
        'diagram_height' => 200,
        'diagram_date_start' => '-1 month',
        'diagram_date_end' => 'now',
      ));
      $settings['node'] = $node;
      $block['subject'] = $delta;
      list($prefix, $name) = explode('_', $delta, 2);
      $function = "archimedes_diagram_view_" . $prefix;
      $block['content'] = $function($name, $settings);
      return $block;
    break;
  }
}

/**
 * Implementation of hook_theme().
 */
function archimedes_diagrams_theme($existing, $type, $theme, $path) {
  return array(
    'archimedes_diagram' => array(
      'arguments' => array('params' => array()),
    ),
    'server_icon' => array(
      'arguments' => array('node' => NULL),
    ),
  );
}

/**
 * View a stats table with given data.
 */
function archimedes_diagram_view_stats($delta, $settings) {
  switch ($delta) {
    case 'growth':
      $start = strtotime($settings['diagram_date_start']);
      $finish = strtotime($settings['diagram_date_end']);
      $rs = db_query("SELECT MAX(a.vid), MIN(a.vid), a.title FROM {archimedes_dataset} a INNER JOIN {node_revisions} n on n.vid = a.vid WHERE n.nid = %d AND n.timestamp < %d AND n.timestamp > %d GROUP BY a.title", $settings['node']->nid, $finish, $start);
      $rows = array();
      while ($row = db_fetch_object($rs)) {
        $min = db_result(db_query("SELECT value FROM {archimedes_dataset} WHERE title = '%s' AND vid = %d", $row->title, $row->min));
        $max = db_result(db_query("SELECT value FROM {archimedes_dataset} WHERE title = '%s' AND vid = %d", $row->title, $row->max));

        $class = '';
        $data = 0;
        // only do the calculations if there won't be any division by 0
        if ($min != 0) {
          $class = round(($max / $min) / 100, 2) > 0 ? 'positive' : 'negative';
          $data = round(($max / $min) / 100, 2);
        }
        $rows[] = array(
          array('header' => TRUE, 'data' => $row->title),
          array('data' => $data . '%', 'class' => $class),
        );
      }
      if (empty($rows)) {
        return '';
      }
      return theme('table', array(), $rows);
    case 'storage':
      // Storage overview graph
      $size[0] = $settings['node']->field_db_size[0]['value'];
      $size[1] = $settings['node']->field_sitesize[0]['value'];
      $size[2] = $settings['node']->field_sitedata[0]['value'];

      // Convert sizes into percentages.
      $total = array_sum($size);
      array_walk($size, create_function('&$val, $key', "\$val = round((\$val / $total) * 100, 2);"));
  
      $params = archimedes_diagram_chart_defaults($settings, count($size));
      $params['cht'] = 'p';
      $params['chd'] = 't:' . implode(',', $size);
      $params['chl'] = implode('%|', $size) . '%';
      $params['chdl'] = 'Database|Application|Assets';
      unset($params['chxt']);
      return theme('archimedes_diagram', $params); 
  }
}

/**
 * Generate defaults for Google charts parameters.
 */
function archimedes_diagram_chart_defaults($settings, $n) {
  $params = array(
    'cht' => isset($settings['type']) ? $settings['type'] : 'ls',
    'chs' => $settings['diagram_width'] . 'x' . $settings['diagram_height'],
    'chxt' => 'y',
    'chma' => '10,10,10,10',
    'chf'  => 'bg,s,F4F4F4',
  );
  $colors = variable_get('archimedes_diagram_colors', array('C47AF5', '7A99F5','7AF57A', 'F5F17A', 'F57C7A', 'F57A99'));
  $params['chco'] = implode(',', array_shift(array_chunk($colors, $n)));
  return $params;
}

/**
 * View a dataset diagram given the data.
 */
function archimedes_diagram_view_dataset($delta, $settings) {
  $start = strtotime($settings['diagram_date_start']);
  $finish = strtotime($settings['diagram_date_end']);
  $rs = db_query("SELECT d.title, d.value, n.timestamp FROM {archimedes_dataset} d INNER JOIN {node_revisions} n ON n.vid = d.vid WHERE n.nid = %d AND d.fid = '%s' AND n.timestamp > %d AND n.timestamp < %d ORDER BY n.timestamp ASC", $settings['node']->nid, $delta, $start, $finish);
  $label_x = $label_y = array();
  while ($row = db_fetch_object($rs)) {
    $label_x[$row->title][] = $row->timestamp;
    $label_y[$row->title][] = $row->value;
  }
  $dataset = array();
  foreach ($label_x as $key => $data) {
    $dataset[] = implode(',', $label_y[$key]);
  }
  if (!count($label_y)) {
    return '';
  }
  $params = archimedes_diagram_chart_defaults($settings, count($label_y));
  $params['chdl'] = implode('|', array_keys($label_y));
  $params['chd'] = 't:' . implode('|', $dataset);
  return theme('archimedes_diagram', $params);
}

/**
 * Theme function to generate a diagram.
 */
function theme_archimedes_diagram($params) {
  $url = url('https://chart.googleapis.com/chart?', array(
    'absolute' => TRUE,
    'query' => $params,
  ));
  return '<img src="' . $url . '" alt="diagram" />';
}

/**
 * Add diagram form data to a diagram block.
 */
function archimedes_diagrams_form($form, $settings) {
  $form['diagram_width'] = array(
    '#title' => 'Diagram Width',
    '#type' => 'textfield',
    '#validate' => 'is_numeric',
    '#suffix' => 'px',
    '#default_value' => $settings['diagram_width'],
  );
  $form['diagram_height'] = array(
    '#title' => 'Diagram Height',
    '#type' => 'textfield',
    '#validate' => 'is_numeric',
    '#suffix' => 'px',
    '#default_value' => $settings['diagram_height'],
  );

  $form['diagram_date_start'] = array(
    '#title' => 'Diagram Date Start',
    '#type' => 'textfield',
    '#description' => 'An absolute date or relative to the current date. e.g. -3 months',
    '#default_value' => $settings['diagram_date_start'],
  );

  $form['diagram_date_end'] = array(
    '#title' => 'Diagram Date End',
    '#type' => 'textfield',
    '#description' => 'An absolute date or relative to the current date. e.g. now',
    '#default_value' => $settings['diagram_date_end'],
  );
  return $form;
}

/**
 * Theme a server from a node.
 */
function theme_server_icon($node, $type) {
  $html = '<div class="server"><div id="' . $node->type . '-' . $node->nid . '" class="server-' . $type . '">';
  $src = drupal_get_path('module', 'archimedes_diagrams') . '/icons/osa_server_' . $type . '.png';
  $html .= theme('imagecache', 'AttachmentThumbnail', $src, "$type server", $node->title);
  $title = $node->title;
  if (strlen($title) > 10) {
    $title = array_shift(explode('.', $title));
  }
  $html .= '<h3>' . l($title, 'node/' . $node->nid, array('attributes' => array('title' => $node->title))) . '</h3>';
  $html .= '</div></div>';
  return $html;
}

function archimedes_diagrams_node_is_application($node, $perm) {
  if ($node->type == 'application') {
    return user_access($perm);
  }
  return FALSE;
}
